/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['AppController_getHello'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/profile': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['AdminController_getProfile_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/update-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations['AdminController_updatePassword_v1'];
        trace?: never;
    };
    '/v1/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['UsersController_findAll_v1'];
        put?: never;
        post: operations['UsersController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/users/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['UsersController_findOne_v1'];
        put?: never;
        post?: never;
        delete: operations['UsersController_remove_v1'];
        options?: never;
        head?: never;
        patch: operations['UsersController_update_v1'];
        trace?: never;
    };
    '/v1/users/deactivate/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations['UsersController_deactivate_v1'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/users/reactivate/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations['UsersController_reactivateAll_v1'];
        trace?: never;
    };
    '/v1/users/reactivate/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations['UsersController_reactivate_v1'];
        trace?: never;
    };
    '/v1/users/generate-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['UsersController_generatePassword_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/users/send-new-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['UsersController_sendNewPassword_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/audit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['AuditController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/auth/login': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Logs in to the system
         */
        post: operations['AuthController_login_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/auth/logout': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['AuthController_logout_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/auth/update-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['AuthController_updatePassword_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/auth/refresh-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['AuthController_refreshToken_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all products */
        get: operations['ProductController_findAll_v1'];
        put?: never;
        /** Create a new product */
        post: operations['ProductController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/product/all/type/{type}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all products by type */
        get: operations['ProductController_findAllByType_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/product/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product by ID */
        get: operations['ProductController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a product by ID */
        patch: operations['ProductController_update_v1'];
        trace?: never;
    };
    '/v1/product/remove/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deactivate a product by id */
        delete: operations['ProductController_deactivate_v1'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/product/reactivate/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate a product by id */
        patch: operations['ProductController_reactivateAll_v1'];
        trace?: never;
    };
    '/v1/reservation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all reservations */
        get: operations['ReservationController_findAll_v1'];
        put?: never;
        /** Create a new reservation */
        post: operations['ReservationController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reservation/deactivate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Update reservation logic deletion status to deactivate */
        delete: operations['ReservationController_deactivateReservations_v1'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reservation/reactivate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update reservation logic deletion status to reactivate */
        patch: operations['ReservationController_reactivateReservations_v1'];
        trace?: never;
    };
    '/v1/reservation/transition-status/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update reservation status after being, can support all states */
        patch: operations['ReservationController_transitionStatus_v1'];
        trace?: never;
    };
    '/v1/reservation/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a reservation by ID */
        get: operations['ReservationController_findOne_v1'];
        put?: never;
        post?: never;
        /** Delete a reservation */
        delete: operations['ReservationController_remove_v1'];
        options?: never;
        head?: never;
        /** Update a reservation */
        patch: operations['ReservationController_update_v1'];
        trace?: never;
    };
    '/v1/reservation/available-actions/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Available Actions for transition reservation status */
        get: operations['ReservationController_validateReservationStatusAvailableActions_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reservation/paginated': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get paginated reservations */
        get: operations['ReservationController_findAllPaginated_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reservation/available-rooms': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener habitaciones disponibles */
        get: operations['ReservationController_getAvailableRooms_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reservation/reservations-in-interval': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las reservaciones disponibles en un intervalo de tiempo */
        get: operations['ReservationController_getReservationInInterval_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reservation/check-availability': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verificar disponibilidad de habitación */
        get: operations['ReservationController_checkAvailability_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/rooms': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las habitaciones */
        get: operations['RoomController_findAll_v1'];
        put?: never;
        /** Crear nueva habitación */
        post: operations['RoomController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/rooms/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener habitación por ID */
        get: operations['RoomController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar habitación existente */
        patch: operations['RoomController_update_v1'];
        trace?: never;
    };
    '/v1/rooms/number/{number}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener habitación por número */
        get: operations['RoomController_findByNumber_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/rooms/{id}/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar estado de una habitación */
        patch: operations['RoomController_updateStatus_v1'];
        trace?: never;
    };
    '/v1/rooms/remove/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples habitaciones */
        delete: operations['RoomController_deleteMany_v1'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/rooms/reactivate/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples habitaciones */
        patch: operations['RoomController_reactivateAll_v1'];
        trace?: never;
    };
    '/v1/rooms/{id}/cleaning': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Cambiar estado de habitación a limpieza */
        patch: operations['RoomController_updateStatusToCleaning_v1'];
        trace?: never;
    };
    '/v1/room-types': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de habitaciones con sus imágenes */
        get: operations['RoomTypeController_findAll_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-types/summary/active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener resumen de todos los tipos de habitaciones activas */
        get: operations['RoomTypeController_findAllActive_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-types/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener un tipo de habitación por ID sin imágenes */
        get: operations['RoomTypeController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-types/create-with-images': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear nuevo tipo de habitación con imágenes
         * @description Permite crear un tipo de habitación con exactamente 5 imágenes requeridas.
         */
        post: operations['RoomTypeController_createWithImages_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-types/{id}/update-with-images': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations['RoomTypeController_updateWithImage_v1'];
        trace?: never;
    };
    '/v1/room-types/{id}/update-main-image': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Establecer una imagen como principal para un tipo de habitación
         * @description Actualiza cuál imagen es la principal para un tipo de habitación específico
         */
        patch: operations['RoomTypeController_updateMainImage_v1'];
        trace?: never;
    };
    '/v1/room-types/remove/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples tipos de habitaciones */
        delete: operations['RoomTypeController_deleteMany_v1'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-types/reactivate/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples tipos de habitaciones */
        patch: operations['RoomTypeController_reactivateAll_v1'];
        trace?: never;
    };
    '/v1/room-types/{id}/with-images': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de habitación con imágenes por ID */
        get: operations['RoomTypeController_findOneWithImages_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all payments */
        get: operations['PaymentsController_findAll_v1'];
        put?: never;
        /** Create a new payment */
        post: operations['PaymentsController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/payments/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new payment detail */
        post: operations['PaymentsController_createPaymentDetail_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/payments/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment by ID */
        get: operations['PaymentsController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update payment by ID */
        patch: operations['PaymentsController_update_v1'];
        trace?: never;
    };
    '/v1/payments/room/details/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get room payment details by payment ID */
        get: operations['PaymentsController_findRoomPaymentDetails_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/payments/detail/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a payment detail by ID */
        delete: operations['PaymentsController_removePaymentDetail_v1'];
        options?: never;
        head?: never;
        /** Update a single payment detail */
        patch: operations['PaymentsController_updatePaymentDetail_v1'];
        trace?: never;
    };
    '/v1/payments/details/batch': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update multiple payment details with same values */
        patch: operations['PaymentsController_updatePaymentDetailsBatch_v1'];
        trace?: never;
    };
    '/v1/services': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los servicios */
        get: operations['ServiceController_findAll_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/services/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener servicio por ID */
        get: operations['ServiceController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar servicio existente */
        patch: operations['ServiceController_update_v1'];
        trace?: never;
    };
    '/v1/seeds': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['SeedsController_initSeed_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all customers */
        get: operations['CustomersController_findAll_v1'];
        put?: never;
        /** Create a new customer */
        post: operations['CustomersController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Importar clientes desde un archivo Excel */
        post: operations['CustomersController_importCustomers_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/import/template': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download template to import client excel */
        get: operations['CustomersController_downloadTemplate_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/searchByDocNumber': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busqueda rápida de cliente por su número de documento de identidad, siempre se tiene que enviar un string o "None" al query param docNumber */
        get: operations['CustomersController_searchByDocNumber_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a customer by id */
        get: operations['CustomersController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a customer by id */
        patch: operations['CustomersController_update_v1'];
        trace?: never;
    };
    '/v1/customers/history/booking/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a history customer by id with optional filters */
        get: operations['CustomersController_findCustomerHistoryById_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/document/number/{documentNumber}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a customer by document number */
        get: operations['CustomersController_findDocumentNumber_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/remove/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deactivate a customer by id */
        delete: operations['CustomersController_deactivate_v1'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/customers/reactivate/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate a customer by id */
        patch: operations['CustomersController_reactivateAll_v1'];
        trace?: never;
    };
    '/v1/room-cleaning': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los registros de limpieza */
        get: operations['CleaningChecklistController_findAll_v1'];
        put?: never;
        /** Crear nuevo registro de limpieza */
        post: operations['CleaningChecklistController_create_v1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-cleaning/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener registro de limpieza por ID */
        get: operations['CleaningChecklistController_findOne_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-cleaning/room/{roomId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener registros de limpieza por habitación */
        get: operations['CleaningChecklistController_findByRoom_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/room-cleaning/date/{date}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener registros de limpieza por fecha */
        get: operations['CleaningChecklistController_findByDate_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/landing/room-types': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener todos los tipos de habitaciones resumidas para landing
         * @description Devuelve tipos de habitaciones activas con imagen principal, nombre, descripción, precio y capacidad
         */
        get: operations['LandRoomTypeController_findAllLandingRoomTypes_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/landing/room-types/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener un tipo de habitación por ID con todas sus imágenes
         * @description Devuelve información detallada de un tipo de habitación específico junto con todas sus imágenes
         */
        get: operations['LandRoomTypeController_findRoomTypeById_v1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdatePasswordDto: {
            password: string;
            newPassword: string;
            confirmPassword: string;
        };
        CreateUserDto: {
            name: string;
            email: string;
            password: string;
            phone?: string;
            /**
             * @description Rol that can be set to the user. Can only be ADMIN or RECEPCIONIST
             * @example ADMIN
             */
            userRol: string;
        };
        UpdateUserDto: {
            /** @description User name */
            name?: string;
            /** @description User phone */
            phone?: string;
            /**
             * @description Rol that can be set to the user. Can only be ADMIN or RECEPCIONIST
             * @example ADMIN
             */
            userRol?: string;
        };
        DeleteUsersDto: {
            ids: string[];
        };
        SendEmailDto: {
            email: string;
            password: string;
        };
        CreateAuditDto: {
            entityId: string;
            entityType: string;
            action: string;
            performedById: string;
            /** Format: date-time */
            createdAt: string;
        };
        LoginAuthDto: {
            /**
             * @description User email
             * @example admin@admin.com
             */
            email: string;
            /**
             * @description User password
             * @example admin
             */
            password: string;
        };
        CreateProductDto: {
            /** @description Nombre del producto */
            name: string;
            /** @description Costo unitario del producto */
            unitCost: number;
            /**
             * @description Tipo de producto. Puede ser COMMERCIAL o INTERNAL_USE
             * @example COMMERCIAL
             */
            type: string;
        };
        /** @enum {string} */
        ProductType: 'COMMERCIAL' | 'INTERNAL_USE';
        UpdateProductDto: {
            /** @description Nombre del producto */
            name?: string;
            /** @description Costo unitario del producto */
            unitCost?: number;
            /**
             * @description Tipo de producto. Puede ser COMMERCIAL o INTERNAL_USE
             * @example COMMERCIAL
             */
            type?: string;
        };
        DeleteProductDto: {
            ids: string[];
        };
        PaginationMetadata: {
            /** @description Total number of items */
            total: number;
            /** @description Current page number */
            page: number;
            /** @description Number of items per page */
            pageSize: number;
            /** @description Total number of pages */
            totalPages: number;
            /** @description Whether there is a next page */
            hasNext: boolean;
            /** @description Whether there is a previous page */
            hasPrevious: boolean;
        };
        PaginatedResponse: {
            /** @description The paginated data */
            data: unknown[][];
            /** @description Pagination metadata */
            meta: components['schemas']['PaginationMetadata'];
        };
        Customer: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates whether the entity is active or not
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            /** @description Customer name */
            name: string;
            /** @description Customer address */
            address: string;
            /** @description Customer birth place */
            birthPlace: string;
            /** @description Customer country */
            country: string;
            /** @description Customer department */
            department?: string;
            /** @description Customer province */
            province?: string;
            /** @description Customer phone number */
            phone: string;
            /** @description Customer occupation */
            occupation: string;
            /**
             * @description Customer document type
             * @enum {string}
             */
            documentType: 'DNI' | 'PASSPORT' | 'FOREIGNER_CARD';
            /** @description Customer document number */
            documentNumber: string;
            /** @description Customer email */
            email: string;
            /**
             * @description Customer marital status
             * @enum {string}
             */
            maritalStatus: 'SINGLE' | 'MARRIED' | 'DIVORCED' | 'WIDOWED';
            /** @description Customer company name */
            companyName?: string;
            /** @description Customer RUC number */
            ruc?: string;
            /** @description Customer company address */
            companyAddress?: string;
        };
        User: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Whether the user is active
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            /** @description User name */
            name: string;
            /** @description User role */
            userRol: string;
            /** @description User email */
            email: string;
            /** @description User password */
            password: string;
            /** @description User phone number */
            phone?: string;
            /**
             * @description Whether the user is a super admin
             * @default false
             */
            isSuperAdmin: boolean;
            /**
             * Format: date-time
             * @description Last login date
             */
            lastLogin: string;
            /**
             * @description Whether the user must change the password
             * @default true
             */
            mustChangePassword: boolean;
        };
        RoomType: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates whether the entity is active or not
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            /**
             * @description Nombre del tipo de habitación
             * @example Habitación doble
             */
            name: string;
            /**
             * @description Capacidad máxima de huéspedes
             * @example 2
             */
            guests: number;
            /**
             * @description Precio por noche
             * @example 150.5
             */
            price: number;
            /**
             * @description Descripción del tipo de habitación
             * @example Habitación con vista al mar y balcón privado
             */
            description: string;
            /**
             * @description Descripción de la cama
             * @example Cama matrimonial king size
             */
            bed: string;
        };
        DetailedRoom: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates whether the entity is active or not
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            /**
             * @description ID del tipo de habitación asociado
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            roomTypeId: string;
            /**
             * @description Número de la habitación
             * @example 101
             */
            number: number;
            /**
             * @description Indica si la habitación tiene papelera
             * @default true
             * @example true
             */
            trashBin: boolean;
            /**
             * @description Indica si la habitación tiene toalla
             * @default true
             * @example true
             */
            towel: boolean;
            /**
             * @description Indica si la habitación tiene papel higiénico
             * @default true
             * @example true
             */
            toiletPaper: boolean;
            /**
             * @description Indica si la habitación tiene jabón de ducha
             * @default true
             * @example true
             */
            showerSoap: boolean;
            /**
             * @description Indica si la habitación tiene jabón de manos
             * @default true
             * @example true
             */
            handSoap: boolean;
            /**
             * @description Indica si la habitación tiene lámpara
             * @default true
             * @example true
             */
            lamp: boolean;
            /**
             * @description Estado de la habitación
             * @example AVAILABLE
             * @enum {string}
             */
            status: 'AVAILABLE' | 'OCCUPIED' | 'CLEANING';
            /**
             * @description Descripción de la televisión
             * @example Smart TV 42 pulgadas
             */
            tv: string;
            /**
             * @description Área en metros cuadrados
             * @example 25.5
             */
            area: number;
            /**
             * @description Tipo de piso
             * @example LAMINATING
             * @enum {string}
             */
            floorType: 'LAMINATING' | 'CARPETING';
            /** @description Nombre del tipo de habitación asociado */
            RoomTypes: components['schemas']['RoomType'];
        };
        DetailedReservation: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Whether the reservation is active
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the reservation was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the reservation was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt?: string;
            /** @description Customer ID associated with the reservation */
            customerId: string;
            /** @description Room ID associated with the reservation */
            roomId: string;
            /** @description User ID of the staff who created the reservation */
            userId: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            reservationDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-in
             * @example 2024-12-25T15:00:00Z
             */
            checkInDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            checkOutDate: string;
            /**
             * @description Current status of the reservation
             * @enum {string}
             */
            status:
                | 'PENDING'
                | 'CONFIRMED'
                | 'CHECKED_IN'
                | 'CHECKED_OUT'
                | 'CANCELED';
            /** @description Origin place from the customer */
            origin: string;
            /** @description Reason for reservation */
            reason: string;
            /** @description JSON list of companions/guests */
            guests?: string;
            /**
             * @description Number of guests requested by the landing page
             * @default 1
             */
            requestedGuestNumber: number;
            /** @description Additional notes or observations */
            observations?: string;
            /**
             * @description Whether the customer accepted extra services
             * @default false
             */
            didAcceptExtraServices: boolean;
            /**
             * @description Whether the customer accepted terms and conditions
             * @default false
             */
            didAcceptTerms: boolean;
            /** @description Customer associated with the reservation */
            customer: components['schemas']['Customer'];
            /** @description User associated with the reservation */
            user: components['schemas']['User'];
            /** @description Room associated with the reservation */
            room: components['schemas']['DetailedRoom'];
        };
        Guest: {
            /** @description The name of the guest */
            name: string;
            /** @description The age of the guest */
            age?: number;
            /** @description The document ID of the guest */
            documentId?: string;
            /**
             * @description The type of document
             * @enum {string}
             */
            documentType?: 'DNI' | 'PASSPORT' | 'FOREIGNER_CARD';
            /** @description The phone number of the guest */
            phone?: string;
            /** @description The email address of the guest */
            email?: string;
            /**
             * Format: date-time
             * @description The birth date of the guest
             */
            birthDate?: string;
            /** @description Additional information about the guest */
            additionalInfo?: string;
        };
        BaseApiResponse: {
            /**
             * @description Estado de la operación
             * @example true
             */
            success: boolean;
            /**
             * @description Mensaje descriptivo
             * @example Operación realizada con éxito
             */
            message: string;
            /** @description Datos de la respuesta */
            data: Record<string, never> | null;
        };
        GuestDto: {
            /** @description Guest full name */
            name: string;
            /** @description Guest age */
            age?: number;
            /** @description Guest document identification */
            documentId?: string;
            /**
             * @description Type of document
             * @enum {string}
             */
            documentType?: 'DNI' | 'PASSPORT' | 'FOREIGNER_CARD';
            /** @description Guest phone number */
            phone?: string;
            /** @description Guest email address */
            email?: string;
            /**
             * Format: date-time
             * @description Guest date of birth
             */
            birthDate?: string;
            /** @description Additional guest information */
            additionalInfo?: string;
        };
        CreateReservationDto: {
            /** @description Customer ID */
            customerId: string;
            /** @description Room ID */
            roomId: string;
            /** @description User ID of the person who creates the reservation */
            userId: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            reservationDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-in
             * @example 2024-12-25T15:00:00Z
             */
            checkInDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            checkOutDate: string;
            /**
             * @description Reservation status
             * @enum {string}
             */
            status:
                | 'PENDING'
                | 'CONFIRMED'
                | 'CHECKED_IN'
                | 'CHECKED_OUT'
                | 'CANCELED';
            /** @description Origin place from the customer */
            origin: string;
            /** @description Reason for reservation */
            reason: string;
            /** @description Guest companions information */
            guests?: components['schemas']['GuestDto'][];
            /** @description Additional observations */
            observations?: string;
        };
        Reservation: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Whether the reservation is active
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the reservation was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the reservation was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt?: string;
            /** @description Customer ID associated with the reservation */
            customerId: string;
            /** @description Room ID associated with the reservation */
            roomId: string;
            /** @description User ID of the staff who created the reservation */
            userId: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            reservationDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-in
             * @example 2024-12-25T15:00:00Z
             */
            checkInDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            checkOutDate: string;
            /**
             * @description Current status of the reservation
             * @enum {string}
             */
            status:
                | 'PENDING'
                | 'CONFIRMED'
                | 'CHECKED_IN'
                | 'CHECKED_OUT'
                | 'CANCELED';
            /** @description Origin place from the customer */
            origin: string;
            /** @description Reason for reservation */
            reason: string;
            /** @description JSON list of companions/guests */
            guests?: string;
            /**
             * @description Number of guests requested by the landing page
             * @default 1
             */
            requestedGuestNumber: number;
            /** @description Additional notes or observations */
            observations?: string;
            /**
             * @description Whether the customer accepted extra services
             * @default false
             */
            didAcceptExtraServices: boolean;
            /**
             * @description Whether the customer accepted terms and conditions
             * @default false
             */
            didAcceptTerms: boolean;
        };
        UpdateManyDto: {
            /**
             * @description Array of IDs to be updated, but only for deactivate and reactivate use-cases
             * @example [
             *       "507f1f77bcf86cd799439011",
             *       "507f1f77bcf86cd799439012"
             *     ]
             */
            ids: string[];
        };
        FailedItem: {
            /**
             * @description The ID of the reservation that failed to update
             * @example 507f1f77bcf86cd799439011
             */
            id: string;
            /**
             * @description The reason why the update failed
             * @example Reservation not found
             */
            reason: string;
        };
        UpdateManyResponseDto: {
            /**
             * @description Array of IDs that were successfully updated
             * @example [
             *       "507f1f77bcf86cd799439011",
             *       "507f1f77bcf86cd799439012"
             *     ]
             */
            successful: string[];
            /** @description Array of objects containing IDs that failed to update and the reasons */
            failed: components['schemas']['FailedItem'][];
        };
        ReservationStatusDto: {
            /**
             * @description The status of the reservation
             * @example CONFIRMED
             * @enum {string}
             */
            status:
                | 'PENDING'
                | 'CONFIRMED'
                | 'CHECKED_IN'
                | 'CHECKED_OUT'
                | 'CANCELED';
        };
        UpdateReservationDto: {
            /** @description Customer ID */
            customerId?: string;
            /** @description Room ID */
            roomId?: string;
            /** @description User ID of the person who creates the reservation */
            userId?: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            reservationDate?: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-in
             * @example 2024-12-25T15:00:00Z
             */
            checkInDate?: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin de check-out
             * @example 2024-12-25T15:00:00Z
             */
            checkOutDate?: string;
            /**
             * @description Reservation status
             * @enum {string}
             */
            status?:
                | 'PENDING'
                | 'CONFIRMED'
                | 'CHECKED_IN'
                | 'CHECKED_OUT'
                | 'CANCELED';
            /** @description Origin place from the customer */
            origin?: string;
            /** @description Reason for reservation */
            reason?: string;
            /** @description Guest companions information */
            guests?: components['schemas']['GuestDto'][];
            /** @description Additional observations */
            observations?: string;
        };
        ReservationStatusAvailableActions: {
            /**
             * @description Whether the reservation can be confirmed
             * @example true
             */
            canConfirm: boolean;
            /**
             * @description Whether the reservation can be checked in
             * @example false
             */
            canCheckIn: boolean;
            /**
             * @description Whether the reservation can be checked out
             * @example false
             */
            canCheckOut: boolean;
            /**
             * @description Whether the reservation can be cancelled
             * @example true
             */
            canCancel: boolean;
            /**
             * @description Whether the reservation can be modified
             * @example true
             */
            canModify: boolean;
            /**
             * @description Whether the reservation can be deactivated
             * @example false
             */
            canDeactivate: boolean;
            /**
             * @description Whether the reservation can be reactivated
             * @example false
             */
            canReactivate: boolean;
        };
        RoomAvailabilityDto: {
            /**
             * @description ID de la habitación consultada
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            roomId: string;
            /**
             * @description Fecha de check-in consultada
             * @example 2025-04-01T14:00:00.000Z
             */
            checkInDate: string;
            /**
             * @description Fecha de check-out consultada
             * @example 2025-04-05T12:00:00.000Z
             */
            checkOutDate: string;
            /**
             * @description Indica si la habitación está disponible para las fechas solicitadas
             * @example true
             */
            isAvailable: boolean;
            /**
             * @description Nombre de la habitación (si está disponible)
             * @example Suite Presidencial
             */
            roomNumber?: string;
            /**
             * @description Nombre del tipo de la habitación (si está disponible)
             * @example Suite Presidencial
             */
            roomTypeName?: string;
            /**
             * @description Precio de la habitación (si está disponible)
             * @example 250
             */
            roomPrice?: number;
        };
        CreateRoomDto: {
            /**
             * @description ID del tipo de habitación
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            roomTypeId: string;
            /**
             * @description Número de la habitación
             * @example 101
             */
            number: number;
            /**
             * @description Descripción de la televisión
             * @example Smart TV 42 pulgadas
             */
            tv: string;
            /**
             * @description Área en metros cuadrados
             * @example 25.5
             */
            area: number;
            /**
             * @description Tipo de piso
             * @example LAMINATING
             * @enum {string}
             */
            floorType: 'LAMINATING' | 'CARPETING';
        };
        Room: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates whether the entity is active or not
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            /**
             * @description ID del tipo de habitación asociado
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            roomTypeId: string;
            /**
             * @description Número de la habitación
             * @example 101
             */
            number: number;
            /**
             * @description Indica si la habitación tiene papelera
             * @default true
             * @example true
             */
            trashBin: boolean;
            /**
             * @description Indica si la habitación tiene toalla
             * @default true
             * @example true
             */
            towel: boolean;
            /**
             * @description Indica si la habitación tiene papel higiénico
             * @default true
             * @example true
             */
            toiletPaper: boolean;
            /**
             * @description Indica si la habitación tiene jabón de ducha
             * @default true
             * @example true
             */
            showerSoap: boolean;
            /**
             * @description Indica si la habitación tiene jabón de manos
             * @default true
             * @example true
             */
            handSoap: boolean;
            /**
             * @description Indica si la habitación tiene lámpara
             * @default true
             * @example true
             */
            lamp: boolean;
            /**
             * @description Estado de la habitación
             * @example AVAILABLE
             * @enum {string}
             */
            status: 'AVAILABLE' | 'OCCUPIED' | 'CLEANING';
            /**
             * @description Descripción de la televisión
             * @example Smart TV 42 pulgadas
             */
            tv: string;
            /**
             * @description Área en metros cuadrados
             * @example 25.5
             */
            area: number;
            /**
             * @description Tipo de piso
             * @example LAMINATING
             * @enum {string}
             */
            floorType: 'LAMINATING' | 'CARPETING';
        };
        StatusRoomDto: {
            /**
             * @description Disponible, ocupada o reservada
             * @example AVAILABLE
             * @enum {string}
             */
            status: 'AVAILABLE' | 'OCCUPIED' | 'CLEANING';
        };
        UpdateRoomDto: {
            /**
             * @description ID del tipo de habitación
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            roomTypeId?: string;
            /**
             * @description Número de la habitación
             * @example 101
             */
            number?: number;
            /**
             * @description Estado del tacho de basura
             * @example true
             */
            trashBin?: boolean;
            /**
             * @description Estado de la toalla
             * @example true
             */
            towel?: boolean;
            /**
             * @description Estado del papel higiénico
             * @example true
             */
            toiletPaper?: boolean;
            /**
             * @description Estado del jabón de ducha
             * @example true
             */
            showerSoap?: boolean;
            /**
             * @description Estado del jabón de manos
             * @example true
             */
            handSoap?: boolean;
            /**
             * @description Estado de la lámpara
             * @example true
             */
            lamp?: boolean;
            /**
             * @description Descripción de la televisión
             * @example Smart TV 42 pulgadas
             */
            tv?: string;
            /**
             * @description Área en metros cuadrados
             * @example 25.5
             */
            area?: number;
            /**
             * @description Tipo de piso
             * @example LAMINATING
             * @enum {string}
             */
            floorType?: 'LAMINATING' | 'CARPETING';
        };
        DeleteRoomDto: {
            /**
             * @description IDs de las habitaciones a eliminar
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ]
             */
            ids: string[];
        };
        CreateRoomTypeWithImagesDto: {
            /**
             * @description Nombre del tipo de habitación
             * @example Habitación doble
             */
            name: string;
            /**
             * @description Capacidad máxima de huéspedes
             * @example 2
             */
            guests: number;
            /**
             * @description Precio por noche
             * @example 150.5
             */
            price: number;
            /**
             * @description Descripción del tipo de habitación
             * @example Habitación con balcón privado
             */
            description: string;
            /**
             * @description Descripción de la cama
             * @example Cama matrimonial king size
             */
            bed: string;
            /** @description Imágenes del tipo de habitación (exactamente 5 requeridas) */
            images: string[];
        };
        ImageRoomTypeUpdateDto: {
            /**
             * @description ID de la imagen a actualizar
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description URL actual de la imagen
             * @example https://pub-c8a9c1f826c540b981f5cfb49c3a55ea.r2.dev/image.jpg
             */
            url: string;
            /**
             * @description Indica si esta imagen es la principal
             * @example false
             */
            isMain: boolean;
        };
        UpdateRoomTypeWithImageDto: {
            /**
             * @description Nombre del tipo de habitación
             * @example Habitación doble
             */
            name?: string;
            /**
             * @description Capacidad máxima de huéspedes
             * @example 2
             */
            guests?: number;
            /**
             * @description Precio por noche
             * @example 150.5
             */
            price?: number;
            /**
             * @description Descripción del tipo de habitación
             * @example Habitación con balcón privado
             */
            description?: string;
            /**
             * @description Descripción de la cama
             * @example Cama matrimonial king size
             */
            bed?: string;
            /**
             * Format: binary
             * @description Nueva imagen para agregar o reemplazar
             */
            newImage?: string;
            /**
             * @description Información para actualizar una imagen existente
             * @example {
             *       "id": "123e4567-e89b-12d3-a456-426614174000",
             *       "url": "https://pub-c8a9c1f826c540b981f5cfb49c3a55ea.r2.dev/image.jpg",
             *       "isMain": true
             *     }
             */
            imageUpdate?: components['schemas']['ImageRoomTypeUpdateDto'];
        };
        DeleteRoomTypeDto: {
            /**
             * @description IDs de los tipos de habitaciones a eliminar
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ]
             */
            ids: string[];
        };
        CreatePaymentDto: {
            /**
             * @description Monto
             * @example 37829.85
             */
            amount: number;
            /**
             * @description Monto pagado
             * @example 38002.55
             */
            amountPaid?: number;
            /**
             * @description ID de la reserva
             * @example ID de la reserva
             */
            reservationId: string;
            /**
             * @description Observaciones
             * @example Observaciones
             */
            observations?: string;
            /**
             * @description Array of details of the payment
             * @example [
             *       {
             *         "paymentDate": "2023-08-15",
             *         "description": "Pago de reserva de habitación",
             *         "type": "ROOM_RESERVATION",
             *         "method": "CREDIT_CARD",
             *         "roomId": "7a1b9c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
             *         "days": 3,
             *         "unitPrice": 150,
             *         "subtotal": 450
             *       },
             *       {
             *         "paymentDate": "2023-08-15",
             *         "description": "Servicio de desayuno",
             *         "type": "EXTRA_SERVICE",
             *         "method": "CASH",
             *         "serviceId": "123e4567-e89b-12d3-a456-426614174000",
             *         "quantity": 2,
             *         "unitPrice": 25,
             *         "subtotal": 50
             *       }
             *     ]
             */
            paymentDetail?: string[];
        };
        CreateManyPaymentDetailDto: {
            /**
             * @description ID del pago
             * @example ID del pago
             */
            paymentId?: string;
            /**
             * @description Array of details of the payment
             * @example [
             *       {
             *         "paymentDate": "2023-08-15",
             *         "description": "Pago de reserva de habitación",
             *         "type": "ROOM_RESERVATION",
             *         "method": "CREDIT_CARD",
             *         "roomId": "7a1b9c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
             *         "days": 3,
             *         "unitPrice": 150,
             *         "subtotal": 450
             *       },
             *       {
             *         "paymentDate": "2023-08-15",
             *         "description": "Servicio de desayuno",
             *         "type": "EXTRA_SERVICE",
             *         "method": "CASH",
             *         "serviceId": "123e4567-e89b-12d3-a456-426614174000",
             *         "quantity": 2,
             *         "unitPrice": 25,
             *         "subtotal": 50
             *       }
             *     ]
             */
            paymentDetail?: string[];
        };
        UpdatePaymentDto: {
            /**
             * @description Monto
             * @example 37829.85
             */
            amount?: number;
            /**
             * @description Monto pagado
             * @example 38002.55
             */
            amountPaid?: number;
            /**
             * @description ID de la reserva
             * @example ID de la reserva
             */
            reservationId?: string;
            /**
             * @description Observaciones
             * @example Observaciones
             */
            observations?: string;
            /**
             * @description Array of details of the payment
             * @example [
             *       {
             *         "paymentDate": "2023-08-15",
             *         "description": "Pago de reserva de habitación",
             *         "type": "ROOM_RESERVATION",
             *         "method": "CREDIT_CARD",
             *         "roomId": "7a1b9c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
             *         "days": 3,
             *         "unitPrice": 150,
             *         "subtotal": 450
             *       },
             *       {
             *         "paymentDate": "2023-08-15",
             *         "description": "Servicio de desayuno",
             *         "type": "EXTRA_SERVICE",
             *         "method": "CASH",
             *         "serviceId": "123e4567-e89b-12d3-a456-426614174000",
             *         "quantity": 2,
             *         "unitPrice": 25,
             *         "subtotal": 50
             *       }
             *     ]
             */
            paymentDetail?: string[];
        };
        UpdatePaymentDetailDto: {
            /** @description ID del detalle de pago */
            paymentDetailId?: string;
            /**
             * @description Date of the payment
             * @example 2021-09-21
             */
            paymentDate?: string;
            /**
             * @description Descripción del detalle de pago
             * @example Descripción del detalle de pago
             */
            description?: string;
            /**
             * @description Tipo de  detalle de pago. Puede ser ROOM_RESERVATION o EXTRA_SERVICE
             * @example ROOM_RESERVATION
             */
            type?: string;
            /**
             * @description Método de pago utilizado. Puede ser CASH, CREDIT_CARD, DEBIT_CARD, TRANSFER, YAPE, PLIN, PAYPAL, IZI_PAY o PENDING_PAYMENT
             * @example CREDIT_CARD
             */
            method?: string;
            /**
             * @description ID del producto
             * @example ID del producto
             */
            productId?: string;
            /**
             * @description ID del servicio
             * @example ID del servicio
             */
            serviceId?: string;
            /**
             * @description Cantidad de productos
             * @example 1
             */
            quantity?: number;
            /**
             * @description ID de la habitación
             * @example ID de la habitación
             */
            roomId?: string;
            /**
             * @description Cantidad de días
             * @example 1
             */
            days?: number;
            /**
             * @description Precio unitario
             * @example 100.00
             */
            unitPrice?: number;
            /**
             * @description Precio total
             * @example 100.00
             */
            subtotal?: number;
        };
        UpdatePaymentDetailsBatchDto: {
            /**
             * @description List of payment detail IDs to update
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000",
             *       "123e4567-e89b-12d3-a456-426614174001"
             *     ]
             */
            paymentDetailIds: string[];
            /**
             * @description Payment date to apply to all details
             * @example 2025-04-17
             */
            paymentDate?: string;
            /**
             * @description Payment method to apply to all details. Can be CASH, CREDIT_CARD, DEBIT_CARD, TRANSFER, YAPE, PLIN, PAYPAL, IZI_PAY or PENDING_PAYMENT
             * @example CREDIT_CARD
             */
            method?: string;
        };
        Service: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates whether the entity is active or not
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            name: string;
            description: string;
            code: string;
            price: number;
        };
        ServiceUpdateDto: {
            /**
             * @description Nombre del servicio
             * @example Desayuno buffet
             */
            name?: string;
            /**
             * @description Descripción detallada del servicio
             * @example Desayuno completo con variedad de alimentos, incluye bebidas calientes y frías
             */
            description?: string;
            /**
             * @description Precio del servicio en moneda local
             * @example 15.99
             */
            price?: number;
        };
        CreateCustomerDto: {
            /** @description Nombre del cliente */
            name: string;
            /** @description Dirección del cliente */
            address: string;
            /** @description Lugar de nacimiento del cliente */
            birthPlace: string;
            /**
             * @description Date of birth of the customer
             * @example 2021-12-31
             */
            birthDate?: string;
            /** @description País de residencia del cliente */
            country: string;
            /** @description Departamento de residencia del cliente */
            department?: string;
            /** @description Provincia de residencia del cliente */
            province?: string;
            /** @description Teléfono del cliente */
            phone: string;
            /** @description Ocupación del cliente */
            occupation: string;
            /**
             * @description Tipo de documento del cliente. Puede ser DNI, PASSPORT o FOREIGNER_CARD
             * @example DNI
             */
            documentType: string;
            /** @description Número de documento del cliente */
            documentNumber: string;
            /** @description Correo electrónico del cliente */
            email?: string;
            /** @description Estado civil del cliente, puede ser SINGLE, MARRIED, DIVORCED o WIDOWED */
            maritalStatus: string;
            /** @description Nombre de la empresa */
            companyName: string;
            /** @description RUC de la empresa */
            ruc?: string;
            /** @description Dirección de la empresa */
            companyAddress?: string;
        };
        ImportCustomersDto: {
            /**
             * Format: binary
             * @description Archivo Excel con los clientes a importar (.xlsx)
             */
            file: string;
            /**
             * @description Indica si se debe continuar con la importación cuando hay errores
             * @default false
             */
            continueOnError: boolean;
        };
        UpdateCustomerDto: {
            /** @description Nombre del cliente */
            name?: string;
            /** @description Dirección del cliente */
            address?: string;
            /** @description Lugar de nacimiento del cliente */
            birthPlace?: string;
            /**
             * @description Date of birth of the customer
             * @example 2021-12-31
             */
            birthDate?: string;
            /** @description País de residencia del cliente */
            country?: string;
            /** @description Departamento de residencia del cliente */
            department?: string;
            /** @description Provincia de residencia del cliente */
            province?: string;
            /** @description Teléfono del cliente */
            phone?: string;
            /** @description Ocupación del cliente */
            occupation?: string;
            /**
             * @description Tipo de documento del cliente. Puede ser DNI, PASSPORT o FOREIGNER_CARD
             * @example DNI
             */
            documentType?: string;
            /** @description Número de documento del cliente */
            documentNumber?: string;
            /** @description Correo electrónico del cliente */
            email?: string;
            /** @description Estado civil del cliente, puede ser SINGLE, MARRIED, DIVORCED o WIDOWED */
            maritalStatus?: string;
            /** @description Nombre de la empresa */
            companyName?: string;
            /** @description RUC de la empresa */
            ruc?: string;
            /** @description Dirección de la empresa */
            companyAddress?: string;
            /** @description Indica si el cliente tiene una empresa asociada */
            hasCompany?: boolean;
        };
        DeleteCustomerDto: {
            ids: string[];
        };
        CreateCleaningChecklistDto: {
            /**
             * @description Fecha de la limpieza
             * @example 2025-03-24
             */
            date: string;
            /**
             * @description ID de la habitación
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            roomId: string;
            /**
             * @description Nombre del personal de limpieza
             * @example Ana García
             */
            staffName: string;
            /**
             * @description ID del usuario verificador
             * @example 123e4567-e89b-12d3-a456-426614174001
             */
            userCheckId: string;
            /**
             * @description Observaciones o comentarios
             * @example Se reemplazó jabón y toallas
             */
            observations?: string;
        };
        CleaningChecklist: {
            /**
             * @description Unique identifier for the entity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates whether the entity is active or not
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             * @example 2025-05-02T20:40:46.491Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             * @example 2025-05-02T20:40:46.491Z
             */
            updatedAt: string;
            /**
             * @description Fecha de la limpieza
             * @example 2025-03-24
             */
            date: string;
            /**
             * @description ID de la habitación
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            roomId: string;
            /**
             * @description Nombre del personal de limpieza
             * @example Ana García
             */
            staffName: string;
            /**
             * @description ID del usuario que verifica
             * @example 123e4567-e89b-12d3-a456-426614174001
             */
            userCheckId: string;
            /**
             * @description Observaciones o comentarios
             * @example Se reemplazaron las toallas y se repuso el jabón
             */
            observations?: string | null;
        };
        LandRoomTypeMainImg: {
            id: string;
            name: string;
            description: string;
            price: number;
            guests: number;
            mainImageUrl: string;
        };
        LandImageRoomType: {
            id: string;
            url: string;
            isMain: boolean;
        };
        LandRoomTypeAllImg: {
            id: string;
            name: string;
            description: string;
            price: number;
            guests: number;
            bed: string;
            images: components['schemas']['LandImageRoomType'][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AdminController_getProfile_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AdminController_updatePassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePasswordDto'];
            };
        };
        responses: {
            /** @description Password updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateUserDto'];
            };
        };
        responses: {
            /** @description User created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_remove_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateUserDto'];
            };
        };
        responses: {
            /** @description User updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_deactivate_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteUsersDto'];
            };
        };
        responses: {
            /** @description Users deactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_reactivateAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteUsersDto'];
            };
        };
        responses: {
            /** @description Users reactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_reactivate_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User reactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_generatePassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get new password */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_sendNewPassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendEmailDto'];
            };
        };
        responses: {
            /** @description Send new password */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuditController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateAuditDto'];
            };
        };
        responses: {
            /** @description Audit created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['LoginAuthDto'];
            };
        };
        responses: {
            /** @description Login user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logout user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_updatePassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePasswordDto'];
            };
        };
        responses: {
            /** @description Update password */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Refresh token */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Products found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateProductDto'];
            };
        };
        responses: {
            /** @description Product created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findAllByType_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tipo de producto (COMMERCIAL o INTERNAL_USE) */
                type: components['schemas']['ProductType'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Products found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateProductDto'];
            };
        };
        responses: {
            /** @description Product updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_deactivate_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteProductDto'];
            };
        };
        responses: {
            /** @description Products deactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_reactivateAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteProductDto'];
            };
        };
        responses: {
            /** @description Products reactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all reservations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Reservation'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateReservationDto'];
            };
        };
        responses: {
            /** @description The created reservation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Reservation'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_deactivateReservations_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateManyDto'];
            };
        };
        responses: {
            /** @description The updated reservation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UpdateManyResponseDto'];
                };
            };
            /** @description Bad Request - Error en la validación de datos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_reactivateReservations_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateManyDto'];
            };
        };
        responses: {
            /** @description The updated reservation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UpdateManyResponseDto'];
                };
            };
            /** @description Bad Request - Error en la validación de datos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_transitionStatus_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ReservationStatusDto'];
            };
        };
        responses: {
            /** @description The updated reservation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Reservation'];
                };
            };
            /** @description Bad Request - Error en la validación de datos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The found reservation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Reservation'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_remove_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The reservation has been successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Reservation ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateReservationDto'];
            };
        };
        responses: {
            /** @description The updated reservation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Reservation'];
                };
            };
            /** @description Bad Request - Error en la validación de datos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_validateReservationStatusAvailableActions_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all reservations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReservationStatusAvailableActions'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_findAllPaginated_v1: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                pageSize?: number;
                /** @description Customer ID to filter reservations */
                customerId?: string;
                /** @description Check-in date to filter reservations */
                checkInDate?: string;
                /** @description Check-out date to filter reservations */
                checkOutDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of detailed reservations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        data?: components['schemas']['DetailedReservation'][];
                        meta?: components['schemas']['PaginationMetadata'];
                    };
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_getAvailableRooms_v1: {
        parameters: {
            query: {
                /** @description Fecha de check-in en formato ISO */
                checkInDate: string;
                /** @description Fecha de check-out en formato ISO */
                checkOutDate: string;
                forUpdate: boolean;
                reservationId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de habitaciones disponibles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DetailedRoom'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_getReservationInInterval_v1: {
        parameters: {
            query: {
                /** @description Fecha de check-in en formato ISO */
                checkInDate: string;
                /** @description Fecha de check-out en formato ISO */
                checkOutDate: string;
                forUpdate: boolean;
                reservationId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de reservaciones disponibles en un inetravlo de tiempo */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DetailedReservation'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReservationController_checkAvailability_v1: {
        parameters: {
            query: {
                /** @description ID de la habitación */
                roomId: string;
                /** @description Fecha de check-in en formato ISO */
                checkInDate: string;
                /** @description Fecha de check-out en formato ISO */
                checkOutDate: string;
                forUpdate: boolean;
                reservationId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Información de disponibilidad de la habitación */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RoomAvailabilityDto'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las habitaciones */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Room'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateRoomDto'];
            };
        };
        responses: {
            /** @description Habitación creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description Datos de entrada inválidos o habitación ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la habitación */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Habitación encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Room'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Habitación no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateRoomDto'];
            };
        };
        responses: {
            /** @description Habitación actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_findByNumber_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Número de la habitación */
                number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Habitación encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Room'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Habitación no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_updateStatus_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la habitación */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['StatusRoomDto'];
            };
        };
        responses: {
            /** @description Estado de habitación actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description ID inválido o estado no permitido */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_deleteMany_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteRoomDto'];
            };
        };
        responses: {
            /** @description Habitaciones desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description IDs inválidos o habitaciones no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_reactivateAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteRoomDto'];
            };
        };
        responses: {
            /** @description Habitaciones reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description IDs inválidos o habitaciones no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomController_updateStatusToCleaning_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la habitación */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Estado de habitación cambiado a limpieza exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Habitación no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de habitaciones con sus imágenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RoomType'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_findAllActive_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista resumida de los tipos de habitaciones activas (solo id, name e isActive) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de habitación encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RoomType'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tipo de habitación no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_createWithImages_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['CreateRoomTypeWithImagesDto'];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_updateWithImage_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['UpdateRoomTypeWithImageDto'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_updateMainImage_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    imageUpdate?: {
                        /** @description ID de la imagen */
                        id?: string;
                        /** @description URL de la imagen */
                        url?: string;
                        /** @description Debe ser true para establecer como principal */
                        isMain?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Imagen principal actualizada correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_deleteMany_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteRoomTypeDto'];
            };
        };
        responses: {
            /** @description Tipos de habitaciones desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description IDs inválidos o tipos de habitaciones no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_reactivateAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteRoomTypeDto'];
            };
        };
        responses: {
            /** @description Tipos de habitaciones reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description IDs inválidos o tipos de habitaciones no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomTypeController_findOneWithImages_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de habitación encontrado con sus imágenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RoomType'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tipo de habitación no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payments retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePaymentDto'];
            };
        };
        responses: {
            /** @description Payment created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_createPaymentDetail_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateManyPaymentDetailDto'];
            };
        };
        responses: {
            /** @description Payment detail created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payment retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePaymentDto'];
            };
        };
        responses: {
            /** @description Payment updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_findRoomPaymentDetails_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room payment details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_removePaymentDetail_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payment detail deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_updatePaymentDetail_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePaymentDetailDto'];
            };
        };
        responses: {
            /** @description Payment detail updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentsController_updatePaymentDetailsBatch_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePaymentDetailsBatchDto'];
            };
        };
        responses: {
            /** @description Payment details batch updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los servicios */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Service'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del servicio */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Servicio encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Service'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Servicio no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ServiceUpdateDto'];
            };
        };
        responses: {
            /** @description Servicio actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SeedsController_initSeed_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customers found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCustomerDto'];
            };
        };
        responses: {
            /** @description Customer created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_importCustomers_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['ImportCustomersDto'];
            };
        };
        responses: {
            /** @description Clientes importados correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Formato de archivo inválido o datos incorrectos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_downloadTemplate_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Plantilla Excel para importar clientes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_searchByDocNumber_v1: {
        parameters: {
            query: {
                docNumber: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customers found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Customer'][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateCustomerDto'];
            };
        };
        responses: {
            /** @description Customer updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_findCustomerHistoryById_v1: {
        parameters: {
            query?: {
                /** @description Filter reservations by year */
                year?: number;
                /** @description Filter reservations by status */
                status?:
                    | 'PENDING'
                    | 'CONFIRMED'
                    | 'CHECKED_IN'
                    | 'CHECKED_OUT'
                    | 'CANCELED';
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description History Customer found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_findDocumentNumber_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                documentNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_deactivate_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteCustomerDto'];
            };
        };
        responses: {
            /** @description Customers deactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomersController_reactivateAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeleteCustomerDto'];
            };
        };
        responses: {
            /** @description Customers reactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CleaningChecklistController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los registros de limpieza */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CleaningChecklist'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CleaningChecklistController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCleaningChecklistDto'];
            };
        };
        responses: {
            /** @description Registro de limpieza creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BaseApiResponse'];
                };
            };
            /** @description Datos de entrada inválidos o registro duplicado */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CleaningChecklistController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del registro de limpieza */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Registro de limpieza encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CleaningChecklist'];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Registro de limpieza no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CleaningChecklistController_findByRoom_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la habitación */
                roomId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Registros de limpieza encontrados */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CleaningChecklist'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CleaningChecklistController_findByDate_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fecha (YYYY-MM-DD) */
                date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Registros de limpieza encontrados */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CleaningChecklist'][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LandRoomTypeController_findAllLandingRoomTypes_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de tipos de habitaciones resumidas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LandRoomTypeMainImg'][];
                };
            };
        };
    };
    LandRoomTypeController_findRoomTypeById_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del tipo de habitación a buscar */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de habitación encontrado con todas sus imágenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LandRoomTypeAllImg'];
                };
            };
        };
    };
}
